<script type="text/javascript">
    var config = {
        apiKey: "AIzaSyAlQxdGj5-UXJduqqnm5ymTIigx4c5c6E0",
        authDomain: "boxfight-9db65.firebaseapp.com",
        databaseURL: "https://boxfight-9db65.firebaseio.com",
        projectId: "boxfight-9db65",
        storageBucket: "boxfight-9db65.appspot.com",
        messagingSenderId: "380901492576"
    };

    firebase.initializeApp(config);


    var database = firebase.database();

    var connectionsRef = database.ref("/connections");
    var connectedRef = database.ref(".info/connected");
    var usersRef = database.ref("/users");


    var zombieRef = database.ref("/zombie");
    	
    var playersRef = database.ref("/players");

    var potionRef = database.ref("/potion");

    var myRef = database.ref("/joined/" + myKey);

    var gameHasStarted = false;

    var iAmPlayer;
    var iHaveJoined = false;

    var beginRef = database.ref("/gamestart");

	    beginRef.set({
	        status: false
	    });
	    beginRef.onDisconnect().remove();

    var positionsRef = database.ref("/positions");

    var joinRef = database.ref("/joined");
   		joinRef.onDisconnect().remove();

    var myKey = "foobar";
    var myName;

    var myScore = 0;
    var thisScore;

    var scoreRef;

    var playerCount = 1;
    var bruh;

    var currentCount;

    var thisX;
    var thisY;

   

    connectedRef.on("value", function(snap) {

        // If they are connected..
        if (snap.val()) {
            // Add user to the connections list.
            var con = connectionsRef.push(true);

            myKey = con.key;
            console.log(myKey);
            // Remove user from the connection list when they disconnect.
            con.onDisconnect().remove();
        }
    });




    window.onload = function() {


        var game = new Phaser.Game(800, 600, Phaser.AUTO, '', {
            preload: preload,
            create: create,
            update: update
        });

        function preload() {

            game.load.image('sky', 'assets/sky.png');
            game.load.image('zombie', 'assets/zombie.png');
            game.load.image('ground', 'assets/platform.png');
            game.load.image('face', 'assets/face.png');
            game.load.image('potion', 'assets/potion.png');
            game.load.spritesheet('dude', 'assets/dude.png', 32, 48);
            game.load.image('boxer', 'assets/character.png');

            potionRef.set({alive: true})


        };

        var sprite;

        var cursors;

        var potion;

        function create() {

            game.add.sprite(0, 0, 'sky');
            game.input.mouse.capture = true;

            cursors = this.input.keyboard.createCursorKeys();

            this.spaceKey = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);

          //  game.scale.fullScreenScaleMode = Phaser.ScaleManager.EXACT_FIT;

          //  game.input.onDown.add(gofull, this);


            players = game.add.group();
            players.enableBody = true;

            scoreTexts = game.add.group();

        };


        var count = 0;
        var designation = false;


        $("#joinButton").on("click", function() {

            joinRef.push({
                name: myKey
            });

            myName = $("#nameInput").val();
            console.log(myName);

            myScore = 0;

            joinRef.on("value", function(snapshot) {

                if (designation === false) {

                    iHaveJoined = true;
                    var newPlayer = snapshot.val();
                    count = snapshot.numChildren();
                    
                    console.log(count + " people joined");

                    iAmPlayer = count;
                    designation = true;
                    console.log("Hello! You are player " + count + " and your name is " + myName);

                    database.ref("/users/" + count).update({myname : myName, score : myScore}) ;




                } else if (designation === true) {

                    count = snapshot.numChildren();

                }



            });



             $("#joinButton").remove();
             $("#nameInput").remove();

             $("#joinTest").html("<h6>Joined!</h6>");
            

        });

        $("#startButton").on("click", function() {

            console.log("game start!");
            beginRef.set({
                status: true
            });
        })


        beginRef.on("value", function(snap) {



            if (snap.val().status === true) {

                gameHasStarted = true;

               


                for (var i = 0; i < count; i++) {
                	var myNameTag;
                    var player = players.create(Math.floor((60 * (i+1))), 30, 'boxer');
                    player.ID = (i + 1);
                    player.zombie = false;
                   // game.input.onDown.addOnce(alert("hello world!"));
                    game.physics.arcade.enable(player);
                    player.body.collideWorldBounds = true;
                    // player.anchor.set(0.5);
                    // game.camera.follow(player);

	      				database.ref("/users/" + (i + 1)).on("value", function(snap) {

	                    myNameTag = snap.val().myname ;	
	                    myScore = snap.val().score ; 

	                    });

                    spriteText = game.add.text(0, 0, myNameTag, { fontSize: '16px', fill: '#000' });

                    spriteText.ID = (i + 1);

                    scoreText  = game.add.text(0, 0, "$" + myScore, { fontSize: '20px', fill: '#1E7B1E' }, scoreTexts);

                    scoreText.ID = (i + 1);

                    player.addChild(spriteText); // add the text to the sprite as a child, just like a group 
                    spriteText.x = player.width * -0.5; // center the text
                    spriteText.y = -20 // position the text 10 pixels above the origin of the sprite

                    player.addChild(scoreText);
                    scoreText.x = player.width * -0.5;
                    scoreText.y = 30 ;

                   

                    $("#startButton").remove();
                    $("#joinButton").remove();


                }

                             potion = game.add.sprite(32, game.world.height - 150, 'potion');
				             game.physics.arcade.enable(potion);
				             potion.body.collideWorldBounds = true;

				             if (iAmPlayer === 1) {

				                thisX = 20 + (Math.random() -0.5) * 500;
				                thisY = 20 + (Math.random() -0.5) * 500;

				                potion.body.velocity.x = thisX;
				                potion.body.velocity.y = thisY;

				              

				            }
				                

				                



            }

        });


       
           potionRef.on("value", function (snap) {

        				// potion.body.velocity.x = snap.val().x ; 
        				// potion.body.velocity.y = snap.val().y ;
        				potion.position.x = snap.val().xcord;
        				potion.position.y = snap.val().ycord;
        				potion.alive = snap.val().alive ; 

        				if (potion.alive === false) {

        					potion.kill();
        				}

        			});


           for (var i = 1; i < (100); i++) {
                	
                	database.ref("/users/" + i).on("value", function(snap) {


                		players.forEach(function(player) {

                		 		if (player.ID === snap.val().name) {

                		 			
                		 			player.position.x = snap.val().x ; 
                		 			player.position.y = snap.val().y ;
                		 			player.zombie = snap.val().zombie;

                		 		}

                		});



                	});
                }
            

        function update() {

        	if (gameHasStarted === true && iAmPlayer === 1) {
        		   
                	 if(potion.position.x === 0 && thisX < 0) 

                    {	thisX = (thisX * -1);
                    	potion.body.velocity.x = thisX;

           				 }

                 if (potion.position.x === 764 && thisX > 0) 

                    {	thisX = (thisX * -1);
                    	potion.body.velocity.x = thisX;
            }
            	if (potion.position.y === 0 && thisY < 0) {

            		thisY = (thisY * -1);
                    	potion.body.velocity.y = thisY;
            	}

            	if (potion.position.y === 566 && thisY > 0) {

            		thisY = (thisY * -1);
                    	potion.body.velocity.y = thisY;
            	}


            	       var potionXY = {

                        xcord: potion.position.x,
                        ycord: potion.position.y,
                        
                    }



                    potionRef.update(potionXY);


        	}

        	else if (gameHasStarted === true) {

        				 if(potion.position.x === 0 && potion.body.velocity.x < 0) 

                    {	
                    	potion.body.velocity.x = (potion.body.velocity.x * -1);

           				 }

                 if (potion.position.x === 764 && potion.body.velocity.x > 0) 

                    {	potion.body.velocity.x = (potion.body.velocity.x * -1);
            }
            	if (potion.position.y === 0 && potion.body.velocity.y < 0) {

            		
                    	potion.body.velocity.y = (potion.body.velocity.y * -1);
            	}

            	if (potion.position.y === 566 && potion.body.velocity.y > 0) {

            		potion.body.velocity.y = (potion.body.velocity.y * -1);
            	}



        	}


            connectionsRef.on("value", function(snap) {

                playerCount = snap.numChildren();

            });

            var myRef = database.ref("/joined/" + myKey);

            var myConnection = database.ref("/users/" + iAmPlayer);



            $("#conref").html("<h6>" + myKey + " and count:" + playerCount + "</h6>");

           // game.physics.arcade.collide(players, players);

            game.physics.arcade.overlap(players, players, playerTouch, null, this);

            game.physics.arcade.overlap(potion, players, potionTouch, null, this);

            bruh = playerCount;

          
    
           

 
            players.forEach(function(sprite) {

                sprite.body.velocity.x = 0;
                sprite.body.velocity.y = 0;

            	if (sprite.zombie) {

            		sprite.zombie = true;
            		
                	sprite.loadTexture('zombie', 0, false);


            	}

            	if (sprite) {


            	}

                if (sprite.ID === iAmPlayer) {

                    var playerXY = {

                        name: sprite.ID,
                        x: sprite.position.x,
                        y: sprite.position.y,
                        zombie: sprite.zombie
                    }



                    myConnection.update(playerXY);

                //         if (game.input.activePointer.leftButton.isDown) {	

                // 		 joinRef.on("value", function(snap) {

              		// 	  currentCount = snap.numChildren();

            				// });

                // 		var RandomZombieID = Math.floor(Math.random() * currentCount) + 1  ;

                // 		var zombieCon = database.ref("/users/" + RandomZombieID);

	               //  		players.forEach(function(sprite) {

                // 				if (sprite.ID === RandomZombieID) {

			             //    		sprite.zombie = true;

			             //    		zombieCon.update({zombie : true});

			             //    		alert("values updated. WELCOME PLAYER" + RandomZombieID +" AS ZOMBIE!!!") ; 



			             //    		zombieRef.set({status: true}) ;

			             //    		}	

	               //  			});
                // 	}





                	

                	  if (this.spaceKey.isDown || cursors.left.isDown || cursors.right.isDown || cursors.up.isDown || cursors.down.isDown) {	

                	  	
                	  		var scoreRef = database.ref("/users/" + iAmPlayer);

                					scoreRef.once("value", function(snap) {

		              			  		thisScore = snap.val().score ; 

		            					});

		            				thisScore ++;

		            				scoreRef.update({score: thisScore});

		            				players.forEach(function(sprite) {

		            				var scoreCheck = database.ref("/users/" + sprite.ID);

		            					scoreCheck.once("value", function(snap) {

		            						var newScore = snap.val().score ;

		            						sprite.children[1].text = "$" + newScore ;

		            					});

		            					

		            				});
		            					

                	  }
                   


                    if (cursors.left.isDown) {
                        //  Move to the left
                        sprite.body.velocity.x = -350;

                    } else if (cursors.right.isDown) {

                        // Move right
                        sprite.body.velocity.x = 350;


                    }

                    if (cursors.up.isDown) {

                        sprite.body.velocity.y = -350;
                    } else if (cursors.down.isDown) {

                        sprite.body.velocity.y = 350;

                    }
                }

        

         

            }, this);

                  function playerTouch(p1, p2) {

              		


              		if (p1.zombie === true || p2.zombie === true) {
              			p1.zombie = true;
              			p2.zombie = true;
              		
              		database.ref("/users/" + p1.ID).update({zombie: true});
              		database.ref("/users/" + p2.ID).update({zombie: true});


              		}

              		



                }

                function potionTouch (potion, sprite) {

	                console.log(  sprite.ID + " has touched the potion") ;

	                potion.kill();

	                potionRef.update({alive: false})

	                var zombieCon = database.ref("/users/" + sprite.ID);

             		sprite.zombie = true;

	                		zombieCon.update({zombie : true});

	                		alert("values updated. WELCOME PLAYER" + sprite.ID +" AS ZOMBIE!!!") ; 



	                		zombieRef.set({status: true}) ;




                }


        }

        function gofull() {

		    if (game.scale.isFullScreen)
		    {
		        game.scale.stopFullScreen();
		    }
		    else
		    {
		        game.scale.startFullScreen(false);
		    }

		}

        function render() {

		    
		    game.debug.spriteCoords(player, 32, 32);

		    

		}




    }
</script>



<h6 style="{color: red}" id="conref"> Hello </h6>

<h6 id="joinTest"> </h6>
	

	<input id = "nameInput">  </input>
    <button id="joinButton">Join</button>

    <button id="startButton">Start Game</button>



<style>
body {background-color: cadetblue;}
h6   {color: blue;}

</style>