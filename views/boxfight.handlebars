<script type="text/javascript">

//////////// Z O M B O X v.1.0 ////////////////

// Game supports one room. Since this is primarily an experimental build, players shouldn't try entering the room once a game is in progress.


//////////////////////////////////////////////


// This config is necessary for connecting the app to Google Firebase, which is our database. Mainly boilerplate.

    var config = {
        apiKey: "AIzaSyAlQxdGj5-UXJduqqnm5ymTIigx4c5c6E0",
        authDomain: "boxfight-9db65.firebaseapp.com",
        databaseURL: "https://boxfight-9db65.firebaseio.com",
        projectId: "boxfight-9db65",
        storageBucket: "boxfight-9db65.appspot.com",
        messagingSenderId: "380901492576"
    };

    firebase.initializeApp(config);


    var database = firebase.database();

    // Defining a connections reference to our database to see how many people are currently viewing the page.

    var connectionsRef = database.ref("/connections");
    var connectedRef = database.ref(".info/connected");

    // Our main users library defined with usersRef. This will store each player's coordinates, score, name, and zombie status. 

    var usersRef = database.ref("/users");
    usersRef.onDisconnect().remove();

    // ZombieRef and playersRef are used mainly to let the game know when a zombie event happens ; potentially expendable.

    var zombieRef = database.ref("/zombie");

    var playersRef = database.ref("/players");

    // potionRef and reviveRef are used to share the status of a healing or zombie potion to all players. It also controls the 
    // respawn of potions when all players are zombies. 

    var potionRef = database.ref("/potion");
    var reviveRef = database.ref("/revive");

    // myRef is used to double check the connection status of players & to see if they are unique. 

    var myRef = database.ref("/joined/" + myKey);

    // gameHasStarted is a useful boolean that helps to control certain event listeners below (only do certain things if game has started)

    var gameHasStarted = false;

    // iAmPlayer dictates to the game whether or not you are player 1, player 2, player 3, etc.

    var iAmPlayer;

    // iHaveJoined is used later to help with finalizing the count of players who are joined in the room.
    var iHaveJoined = false;

    // beginRef is a database reference that shares the status of a game being started. 

    var beginRef = database.ref("/gamestart");

    beginRef.set({
        status: false
    });
    beginRef.onDisconnect().remove();

    // joinRef shares which players are actually in the room.

    var joinRef = database.ref("/joined");
    joinRef.onDisconnect().remove();

    // myKey is the unique connection key. myName is a placeholder for the name the player chooses when the join the room.

    var myKey = "foobar";
    var myName;

    //	Variables to help keep track of score

    var myScore = 0;
    var thisScore;

    var scoreRef;

    // playerCount gets updated as more players join the room, currentCount is also used with the join room event listeners

    var playerCount = 1;
    var bruh;

    var currentCount;

    // thisX and thisY are used to set speeds for the potions

    var thisX;
    var thisY;

    // potion is one of the main sprites used; gets killed and regenerated frequently. Defining it globally is necessary and
    // allows phaser to use it seemlessly.

    var potion;

    // numZombies is the required value of zombies needed for allZombies to turn true; pandemicCheck is used with an event listener.
    // When all players are zombies a healing potion is generated.

    var numZombies;

    var allZombies = false;

    var pandemicCheck;

    // playerList was used for experimental reasons and debugging.

    var playerList;

    // scoreHolder and nameHolder are used for the end game condition and determining who has the highest score and what that value is.
    // localMax and coleslaw are necessary placeholder variables that test values against one another. 

    var scoreHolder = [];
    var nameHolder = [];
    var localMax = 1;
    var howMany;
    var coleslaw;

    // reviveRef tests if a potion needs to be revived or not (based on allZombies condition)

    reviveRef.set({
        revive: false
    });

    // connectedRef shows how many people are viewing the site (not necessarily joined into room); removes them upon disconnect

    connectedRef.on("value", function(snap) {

        // If they are connected..
        if (snap.val()) {
            // Add user to the connections list.
            var con = connectionsRef.push(true);

            myKey = con.key;
            console.log(myKey);
            // Remove user from the connection list when they disconnect.
            con.onDisconnect().remove();
        }
    });


    // Here is where we begin using the Phaser.io library when the window is fully loaded. Phaser is how the game actually functions, uses physics,
    // movement, timing, sprites, overlap events, etc. and the game wouldn't be possible without it.

    window.onload = function() {

    	// Slideshow that displays rules before players enter the room.

        $("#slideshow > div:gt(0)").hide();

        setInterval(function() {
            $('#slideshow > div:first')
                .fadeOut(1000)
                .next()
                .fadeIn(1000)
                .end()
                .appendTo('#slideshow');
        }, 3500);

        // Create a new instance of a Phaser game: specify the length and width of the CANVAS and the approprite functions


        var game = new Phaser.Game(800, 600, Phaser.AUTO, '', {
            preload: preload,
            create: create,
            update: update
        });

        // preload is what you want Phaser to have ready before the game even starts - this includes your sprites, audio, spritesheets, etc.

        function preload() {

            game.load.image('sky', 'assets/sky.png');
            game.load.image('grass', 'assets/grass.png');
            game.load.image('zombie', 'assets/zombie.png');
            game.load.image('ground', 'assets/platform.png');
            game.load.image('face', 'assets/face.png');
            game.load.image('potion', 'assets/potion.png');
            game.load.spritesheet('dude', 'assets/dude.png', 32, 48);
            game.load.image('boxer', 'assets/character.png');
            game.load.image('bigzombie', 'assets/bigzombie.png');
            game.load.image('instructions', 'assets/rules.png');
            game.load.image('healer', 'assets/healer.png');

            // potionRef here is a sanity check to make sure a zombie potion always exists when the game begins.

            potionRef.set({
                alive: true
            })


        };

        // sprite refers to a general sprite that you might use in the game - you can name it whatever you want.

        var sprite;

        // Define cursors as a global variable so Phaser hears it as a whole (used later for arrow keys).

        var cursors;

        var potion;

        // rules was an extra sprite that showed the game rules on the canvas before the game begins.

        var rules;

        // counter and text are used for timekeeping. Each game lasts 60 seconds and this global variable is necessary for endgame conditions.

        var counter = 60;
        var text = 0;

        // create is what happens when game game has all its presets loaded and before the game begins its constant refreshing. 
        // it "creates" the world, the characters, the sprites, etc.

        function create() {

        	// adding the background to the game and the preappended rules sprite.

            game.add.sprite(0, 0, 'grass');
            rules = game.add.sprite(0, 0, 'instructions');

            // allows the game to hear mouse events

            game.input.mouse.capture = true;

            // allows the game to hear cursor keys + spacebar on the keyboard

            cursors = this.input.keyboard.createCursorKeys();

            this.spaceKey = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);

            // defines that there can be multiple "players", or characters in the game. enableBody allows physics to take place.

            players = game.add.group();
            players.enableBody = true;

            scoreTexts = game.add.group();



        };

        // updateCounter is used to make the clock count down after the game begins

        function updateCounter() {

            if (counter > 0) {

                counter = counter - 1;

                text.setText(counter);

            }

        }


        var count = 0;
        var designation = false;

        // count and designation are used to check if each sprite has a corresponding player attached to their likeness (so they can store data)


        $("#joinButton").on("click", function() {

            joinRef.push({
                name: myKey
            });

            // when a player clicks the "Join" button it adds them to the room.

            rules.kill();

            // remove old sprite

            myName = $("#nameInput").val();
            console.log(myName);

            // Grabs whatever is written into the name input (doesn't allow spaces) and saves it as a local variable of myName

            myScore = 0;

            // Local variable to save your own score

            joinRef.on("value", function(snapshot) {

            	// Event listener, runs function when player enters room

                if (designation === false) {

                    iHaveJoined = true;
                    var newPlayer = snapshot.val();
                    count = snapshot.numChildren();

                    // count is updated with the number of people currently in the room

                    // iAmPlayer is your player number (1, 2, 3, etc.) and stays that way for the duration of the game

                    iAmPlayer = count;
                    designation = true;

                    // set boolean to true to prevent function from repeating

                    console.log("Hello! You are player " + count + " and your name is " + myName);

                    // update the database with all of the pertinent information for that player that just entered

                    database.ref("/users/" + count).update({
                        myname: myName,
                        score: myScore
                    });




                } else if (designation === true) {

                	// boolean setting allows player count to be constantly updated

                    count = snapshot.numChildren();

                }



            });

            if (iAmPlayer === 1) {

            	// gives Player 1 the "Start" button ; only they can choose when the game starts that way they can wait for all players to join.

                $("#startButton").css("display", "block");

            } else {

            	// different graphics for players who aren't Player 1

                $("#alert").text("waiting on players...");
                $("#watermark").remove();
            }

            // Removes input and join buttons to prevent double adding of players

            $("#joinButton").remove();
            $("#nameInput").remove();


        });

        $("#startButton").on("click", function() {

        	// database hears when the game begins; all players recieve "event" and have gamestart conditions appended

            beginRef.set({
                status: true
            });
        })


        beginRef.on("value", function(snap) {

        	// this "event" causes this function to occur, checks if game has started on all screens

            if (snap.val().status === true) {

                $("canvas").addClass("hello");

                $("canvas").attr('style', 'display: block !important');

                $(".hello").attr('style', 'display: block !important');

                $("#slideshow").remove();

                // pre game slideshow is removed, actual game canvas is shown and unhidden

                text = game.add.text(game.world.centerX, 25, '60', {
                    font: "40px Arial Black",
                    fill: "#00ffff",
                    align: "center"
                });
                text.anchor.setTo(0.5, 0.5);


                // text is a variable that holds the game timer; text is updated each second and updated in Phaser

                game.time.events.loop(Phaser.Timer.SECOND, updateCounter, this);

                gameHasStarted = true;

                // local variable for sanity check to tell that game has started

                $("#watermark").remove();
                $("#alert").remove();
                $("#conref").remove();

                // get rid of waiting room fluff

                for (var i = 0; i < count; i++) {
                    var myNameTag;
                    var player = players.create(Math.floor((60 * (i + 1))), 30, 'boxer');
                    player.ID = (i + 1);
                    player.zombie = false;
            
                    game.physics.arcade.enable(player);
                    player.body.collideWorldBounds = true;
                 
                 	// for each player that is in the room, create a sprite with a unique ID
                 	// afterwards, send that information to the database

                    database.ref("/users/" + (i + 1)).on("value", function(snap) {

                        myNameTag = snap.val().myname;
                        myScore = snap.val().score;

                    });

                    // add a floating name tag to each player's sprite

                    spriteText = game.add.text(0, 0, myNameTag, {
                        fontSize: '16px',
                        fill: '#FFF'
                    });

                    spriteText.ID = (i + 1);

                    // add a floating score counter to each player's sprite

                    scoreText = game.add.text(0, 0, "$" + myScore, {
                        fontSize: '20px',
                        fill: '#33ffff'
                    }, scoreTexts);

                    scoreText.ID = (i + 1);

                    player.addChild(spriteText); // add the text to the sprite as a child, just like a group 
                    spriteText.x = player.width * -0.5; // center the text
                    spriteText.y = -20 // position the text 10 pixels above the origin of the sprite

                    player.addChild(scoreText);
                    scoreText.x = player.width * -0.5;
                    scoreText.y = 30;



                    $("#startButton").remove();
                    $("#joinButton").remove();


                }

                // add a potion to the game that turns a human player into a zombie (potion.healthy dictates this)
                // this is a start condition for the game
                // also need to tell the game that the potion can't leave the world; is given a speed and spawn location


                potion = game.add.sprite(32, game.world.height - 150, 'potion');
                game.physics.arcade.enable(potion);
                potion.body.collideWorldBounds = true;
                potion.healthy = false;

                // only player 1 sets the speed of the potion; don't want multiple random values on different screens conflicting

                if (iAmPlayer === 1) {

                    thisX = 20 + (Math.random() - 0.5) * 500;
                    thisY = 20 + (Math.random() - 0.5) * 500;

                    potion.body.velocity.x = thisX;
                    potion.body.velocity.y = thisY;



                }




            }

        });

		// this is used to constantly update the potion location + status on all players by reading from the database the coordinates
		// that player 1 is writing to the database

        potionRef.on("value", function(snap) {

        
            potion.position.x = snap.val().xcord;
            potion.position.y = snap.val().ycord;
            potion.alive = snap.val().alive;

            if (potion.alive === false) {

                potion.kill();
            }

  


        });

        reviveRef.on("value", function(snap) {

        	// this function is used to regenerate the potion sprite (as healthy) if all the players are zombies 
        	// it also writes this information to the database to share it to all screens
        	// same instance of Player 1 "dictating" the "random" speed and location of potion

            if (snap.val().revive === true) {

                potion.alive = true;
                potionRef.update({
                    alive: true
                });
                potion.revive();

                potion.healthy = true;

                if (iAmPlayer === 1) {

                    thisX = 20 + (Math.random() - 0.5) * 500;
                    thisY = 20 + (Math.random() - 0.5) * 500;

                    potion.body.velocity.x = thisX;
                    potion.body.velocity.y = thisY;



                }
            }


        });



        for (var i = 1; i < (25); i++) {

        	// for loop that updates ALL positions + zombie statuses of ALL players on ALL screens - this is where the magic happens! Constantly reading and writing data to and from all screens is what provides the multiplayer experience.

            database.ref("/users/" + i).on("value", function(snap) {

            	// unlike a for loop, players.forEach references every sprite of a group on the screen in that instance. 
            	// players is a group that holds each individual player sprite; it checks the ID of that sprite and sees if it 
            	// matches the name of the user, which should be equal to an integer (1, 2, 3) equal to their player number

            	// That way only sprites corresponding to that specific player's movements are updated. If player X moves left, 
            	// only Sprite X will be shown moving on everyone's screens.

                players.forEach(function(player) {

                    if (player.ID === snap.val().name) {


                        player.position.x = snap.val().x;
                        player.position.y = snap.val().y;
                        player.zombie = snap.val().zombie;

                    }

                });



            });
        }

        // update is the heartbeat of the Phaser game - constantly refreshes to create motion, time events, and check for events

        function update() {

            if (counter === 0) {

            	// endgame condition: timer hits zero


                players.forEach(function(sprite) {

                	// collect the names and scores of all the players

                    nameHolder.push(sprite.children[0].text);
                    scoreHolder.push(sprite.children[1].text);

                });

                players.forEach(function(sprite) {

                	// remove them from the screen as well as any any potions that might be floating around

                    sprite.kill();
                    potion.kill();


                });


                for (var i = 0; i < scoreHolder.length; i++) {

                	// for loop to check which score is the highest and who has it

                    if (parseInt(scoreHolder[i].slice(1, scoreHolder[i].length)) > localMax) {

                        coleslaw = scoreHolder[i];

                        localMax = parseInt(scoreHolder[i].slice(1, scoreHolder[i].length));
                    }

                }

                // append name and score of winning player to the middle of the screen

                text.setText("Winner: " + nameHolder[scoreHolder.indexOf(coleslaw)] + " with $" + localMax + "!");
                text.y = 250;

                counter = -10;

                // generate a replay button that reloads the window and allows people to recreate the room

                $("#thebuttons").html('<button id="replayButton">Play Again?</button>')

                $("#replayButton").on("click", function() {

                    location.reload();

                });

            }


            // following if condition sets up the "bounce" for the potion - have velocity change direction if it hits the wall


            if (gameHasStarted === true && iAmPlayer === 1) {

                if (potion.position.x === 0 && thisX < 0)

                {
                    thisX = (thisX * -1);
                    potion.body.velocity.x = thisX;

                }

                if (potion.position.x === 764 && thisX > 0)

                {
                    thisX = (thisX * -1);
                    potion.body.velocity.x = thisX;
                }
                if (potion.position.y === 0 && thisY < 0) {

                    thisY = (thisY * -1);
                    potion.body.velocity.y = thisY;
                }

                if (potion.position.y === 566 && thisY > 0) {

                    thisY = (thisY * -1);
                    potion.body.velocity.y = thisY;
                }

                // update the database with potion coordinates


                var potionXY = {

                    xcord: potion.position.x,
                    ycord: potion.position.y,

                }

                potionRef.update(potionXY);

                // if you aren't player 1, sanity check to make sure potion moves in proper directions and velocity


            } else if (gameHasStarted === true) {

                if (potion.position.x === 0 && potion.body.velocity.x < 0)

                {
                    potion.body.velocity.x = (potion.body.velocity.x * -1);

                }

                if (potion.position.x === 764 && potion.body.velocity.x > 0)

                {
                    potion.body.velocity.x = (potion.body.velocity.x * -1);
                }
                if (potion.position.y === 0 && potion.body.velocity.y < 0) {


                    potion.body.velocity.y = (potion.body.velocity.y * -1);
                }

                if (potion.position.y === 566 && potion.body.velocity.y > 0) {

                    potion.body.velocity.y = (potion.body.velocity.y * -1);
                }



            }

            if (gameHasStarted) {

            	// if potion respawns it will be a healthy potion; this changes the color of the potion to red to indicate that

                if (potion.healthy === true) {

                    potion.loadTexture('healer', 0, false);

                }

            }

            // another event listener to update the current number of players (sanity check)
            // allows us to show which players have entered the room so far and update the loading screen

            joinRef.on("value", function(snap) {
                playerCount = snap.numChildren();
                var joinedPlayers = snap.numChildren();
                playerList = [];

                for (var i = 1; i < (joinedPlayers + 1); i++) {
                    database.ref("/users/" + i).on("value", function(snapshot) {

                        playerList.push((" " + snapshot.val().myname));

                    });
                }


            });

            var myRef = database.ref("/joined/" + myKey);

            var myConnection = database.ref("/users/" + iAmPlayer);

            // update the screen once the values have been loaded

            $("#conref").html("<h6>Entered Players: " + playerList + "</h6>");

            // set up conditions for what happens if a player touches a zombie / if a player touches a potion


            game.physics.arcade.overlap(players, players, playerTouch, null, this);

            game.physics.arcade.overlap(potion, players, potionTouch, null, this);


            // for loop that checks each sprite constantly; prevents the sprites from moving when fingers are off the arrow keys
            // in this for loop, each character controlled by a player is just called "sprite" as per the function argument

            players.forEach(function(sprite) {

                sprite.body.velocity.x = 0;
                sprite.body.velocity.y = 0;

                // loads proper textures depending on whether or not the player is a zombie

                if (sprite.zombie) {

                    sprite.zombie = true;

                    sprite.loadTexture('zombie', 0, false);

                    // sprite.children[1].y = 45;

                } else if (sprite.zombie === false) {
                    sprite.zombie = false;
                    sprite.loadTexture('boxer', 0, false);
                    sprite.children[1].y = 30;

                }

                if (sprite) {


                }

                // if you are controlling your sprite, update the user library in the database with your name, coordinates,
                // and general zombie status. This updating is heard by the event listeners and all screens are updated.

                if (sprite.ID === iAmPlayer) {

                    var playerXY = {

                        name: sprite.ID,
                        x: sprite.position.x,
                        y: sprite.position.y,
                        zombie: sprite.zombie
                    }

                    myConnection.update(playerXY);



                    // event listener that checks if the cursor keys are being pressed

                    if (this.spaceKey.isDown || cursors.left.isDown || cursors.right.isDown || cursors.up.isDown || cursors.down.isDown) {


                    	// if a player is a human and moving around, they constantly earn points

                    	// increases score, writes to database	

                        var scoreRef = database.ref("/users/" + iAmPlayer);

                        scoreRef.once("value", function(snap) {

                            thisScore = snap.val().score;

                        });



                        if (sprite.zombie === false) {

                            thisScore++;

                        } else if (sprite.zombie === true) {

                        	// zombies do not earn points from moving around, only infecting others

                        }

                        scoreRef.update({
                            score: thisScore
                        });

                        // update players' scores next to their nametags by checking database
                        // some functions use "once" rather than "on" since their immediate accuracy isn't pertinent to game
                        // functioning properly / without lag

                        players.forEach(function(sprite) {

                            var scoreCheck = database.ref("/users/" + sprite.ID);

                            scoreCheck.once("value", function(snap) {

                                var newScore = snap.val().score;

                                sprite.children[1].text = "$" + newScore;

                            });



                        });


                    }

                    // if you are holding a cursor, move your sprite in that direction

                    if (sprite.zombie === false) {

                        if (cursors.left.isDown) {
                            //  Move to the left
                            sprite.body.velocity.x = -350;

                        } else if (cursors.right.isDown) {

                            // Move right
                            sprite.body.velocity.x = 350;


                        }

                        if (cursors.up.isDown) {

                            sprite.body.velocity.y = -350;
                        } else if (cursors.down.isDown) {

                            sprite.body.velocity.y = 350;

                        }

                        // zombies move slower than humans

                    } else if (sprite.zombie === true) {

                        if (cursors.left.isDown) {
                            //  Move to the left
                            sprite.body.velocity.x = -250;

                        } else if (cursors.right.isDown) {

                            // Move right
                            sprite.body.velocity.x = 250;


                        }

                        if (cursors.up.isDown) {

                            sprite.body.velocity.y = -250;
                        } else if (cursors.down.isDown) {

                            sprite.body.velocity.y = 250;

                        }

                    }

                }


            }, this);

		// the playerTouch condition brings in two players as arguments p1 and p2
		// checks if either player is a zombie and makes them both zombies if true
		// players lose points if infected by zombie / zombie gains points for infecting player
		// scores are updated in database then written to all screens
		// sprite zombie values are set to true in the database as well for their corresponding user library

            function playerTouch(p1, p2) {

                if (p1.zombie === true && p2.zombie === false) {

                    var gainerCon = database.ref("/users/" + p1.ID);
                    var loserCon = database.ref("/users/" + p2.ID);

                    gainerCon.once("value", function(snap) {

                        var checkThisScore = snap.val().score;

                        checkThisScore = checkThisScore + 500;

                        gainerCon.update({
                            score: checkThisScore
                        });



                    });


                    loserCon.once("value", function(snap) {

                        var checkThisScore = snap.val().score;

                        checkThisScore = (checkThisScore - 500);

                        loserCon.update({
                            score: checkThisScore
                        });

                    });




                    p1.zombie = true;
                    p2.zombie = true;

                    database.ref("/users/" + p1.ID).update({
                        zombie: true
                    });
                    database.ref("/users/" + p2.ID).update({
                        zombie: true
                    });


                } else if (p1.zombie === false && p2.zombie === true) {

                    var gainerCon = database.ref("/users/" + p2.ID);
                    var loserCon = database.ref("/users/" + p1.ID);

                    gainerCon.once("value", function(snap) {

                        var checkThisScore = snap.val().score;

                        checkThisScore = checkThisScore + 500;

                        gainerCon.update({
                            score: checkThisScore
                        });



                    });

                    loserCon.once("value", function(snap) {

                        var checkThisScore = snap.val().score;

                        checkThisScore = (checkThisScore - 500);

                        loserCon.update({
                            score: checkThisScore
                        });

                    });



                    p1.zombie = true;
                    p2.zombie = true;

                    database.ref("/users/" + p1.ID).update({
                        zombie: true
                    });
                    database.ref("/users/" + p2.ID).update({
                        zombie: true
                    });


                }



                if (p1.zombie === true || p2.zombie === true) {
                    p1.zombie = true;
                    p2.zombie = true;

                    database.ref("/users/" + p1.ID).update({
                        zombie: true
                    });
                    database.ref("/users/" + p2.ID).update({
                        zombie: true
                    });


                }

                // event listener to see if all players are zombies or not


                joinRef.once("value", function(snap) {

                    numZombies = snap.numChildren();

                    var pandemicRef = database.ref("/users/").orderByChild("zombie").equalTo(true);


                    pandemicRef.on("value", function(response) {

                        pandemicCheck = response.numChildren();


                        if (allZombies === false) {

                            // console.log(pandemicCheck);

                            if (pandemicCheck === numZombies) {

                            	// sends an update to revive the potion, which is heard by the listener above 

                                reviveRef.update({
                                    revive: false
                                });

                                reviveRef.update({
                                    revive: true
                                });

                             	// local variable updated

                                allZombies = true;
                            }

                        }

                    });


                });


            }

            // potionTouch checks which player touched which potion + turns them into a zombie or into a human

            function potionTouch(potion, sprite) {

                var isItAlive;

                // sanity check so only one player touches potion at a time

                potionRef.on("value", function(res) {

                    isItAlive = res.val().alive

                });

                // human touching green potion = they become zombie
                // database is updated to reflect a dead potion
                // database is updated to reflect that player who touched it is now zombie

                if (potion.healthy === false && isItAlive === true) {

                    console.log(sprite.ID + " has touched the potion");

                    // removes actual potion sprite from game (until revived again)

                    potion.kill();

                    potionRef.update({
                        alive: false
                    })

                    var zombieCon = database.ref("/users/" + sprite.ID);

                    sprite.zombie = true;

                    zombieCon.update({
                        zombie: true
                    });

                    // potions give points, database updated

                    zombieCon.once("value", function(snap) {

                        var checkScore = snap.val().score;

                        checkScore = checkScore + 2000;

                        zombieCon.update({
                            score: checkScore
                        });

                    });

                    zombieRef.set({
                        status: true
                    });


                    // equal and exact opposite occurs if zombie touches healing potion

                } else if (potion.healthy === true && isItAlive === true) {

                    console.log(sprite.ID + " has touched the medicine");

                    potion.kill();

                    potionRef.update({
                        alive: false
                    });

                    var zombieCon = database.ref("/users/" + sprite.ID);

                    sprite.zombie = false;

                    zombieCon.update({
                        zombie: false
                    });

                    // potion still gives you points

                    zombieCon.once("value", function(snap) {

                        var checkScore = snap.val().score;

                        checkScore = checkScore + 1000;

                        zombieCon.update({
                            score: checkScore
                        });

                    });

                    zombieRef.set({
                        status: false
                    });

                    // if someone drinks a healing potion, allZombies cannot be true


                    allZombies = false;


                }

            }

        }

    

        function render() {

        	// for debugging and sprite locations

            game.debug.spriteCoords(player, 32, 32);



        }




    }
</script>

<h1 id="alert">Z O M B O X </h1>
<h2 id="watermark">by juan debiedma </h2>



<h6 id="conref"> </h6>

<div id="thebuttons">

    <input id="nameInput"> </input>
    <button id="joinButton">Join</button>

    <button id="startButton">Start Game</button>

</div>

<div id="slideshow">
    <div>
        <img src="http://i.imgur.com/WVCfXao.png">
    </div>
    <div>
        <img src="http://i.imgur.com/7lG31ei.png">
    </div>
    <div>
        <img src="http://i.imgur.com/shTKbwy.png">
    </div>
    <div>
        <img src="http://i.imgur.com/P5I5KW1.png">
    </div>
    <div>
        <img src="http://i.imgur.com/H2ooSvx.png">
    </div>

</div>





<style>
    h1 {
        font-family: 'VT323', cursive;
        font-size: 100px;
        margin-top: -10px;
        padding: 0px;
        margin-bottom: 32px;
        height: 64px;
    }

    canvas {
        display: none !important;
    }

    h2 {

        font-size: 15px;
        line-height: 2.66667rem;
        height: 30px;
    }

    body {
        background: linear-gradient(284deg, #1a72c5, #4c9c23);
        background-size: 400% 400%;

        -webkit-animation: AnimationName 9s ease infinite;
        animation: AnimationName 9s ease infinite;
    }

    @-webkit-keyframes AnimationName {
        0% {
            background-position: 0% 50%
        }
        50% {
            background-position: 100% 50%
        }
        100% {
            background-position: 0% 50%
        }
    }

    @keyframes AnimationName {
        0% {
            background-position: 0% 50%
        }
        50% {
            background-position: 100% 50%
        }
        100% {
            background-position: 0% 50%
        }
    }


    h6 {
        color: blue;
        font-size: 15px;
        font-weight: bold;
        text-align: center;
        padding-top: 5px;
    }

    #thebuttons {

        margin-left: 35%;
        margin-top: 35px;
    }

    canvas {
        margin-left: 20%;
    }

    #startButton {

        display: none;
        margin-left: 15%
    }



    #alert {
        color: #39f !important;
    }

    @-webkit-keyframes colours {
        0% {
            color: red;
        }
        25% {
            color: cyan;
        }
        50% {
            color: green;
        }
        75% {
            color: yellow;
        }
        100% {
            color: red;
        }
    }

    #alert {
        -webkit-animation-direction: normal;
        -webkit-animation-duration: 10s;
        -webkit-animation-iteration-count: infinite;
        -webkit-animation-name: colours;
        -webkit-animation-timing-function: ease;
    }

    #slideshow {
        margin: 50px auto;
        position: relative;
        width: 720px;
        height: 137px;
        padding: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.4);
    }

    #slideshow>div {
        position: absolute;
        top: 10px;
        left: 10px;
        right: 10px;
        bottom: 10px;
    }
</style>