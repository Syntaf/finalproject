<script type="text/javascript">       

    var config = {
        apiKey: "AIzaSyAlQxdGj5-UXJduqqnm5ymTIigx4c5c6E0",
        authDomain: "boxfight-9db65.firebaseapp.com",
        databaseURL: "https://boxfight-9db65.firebaseio.com",
        projectId: "boxfight-9db65",
        storageBucket: "boxfight-9db65.appspot.com",
        messagingSenderId: "380901492576"
    };

    firebase.initializeApp(config);


    var database = firebase.database();

    var connectionsRef = database.ref("/connections");
    var connectedRef = database.ref(".info/connected");
    var usersRef = database.ref("/users");
    usersRef.onDisconnect().remove();


    var zombieRef = database.ref("/zombie");

    var playersRef = database.ref("/players");

    var potionRef = database.ref("/potion");
    var reviveRef = database.ref("/revive");

    var myRef = database.ref("/joined/" + myKey);

    var gameHasStarted = false;

    var iAmPlayer;
    var iHaveJoined = false;

    var beginRef = database.ref("/gamestart");

    beginRef.set({
        status: false
    });
    beginRef.onDisconnect().remove();

    var positionsRef = database.ref("/positions");

    var joinRef = database.ref("/joined");
    joinRef.onDisconnect().remove();

    var myKey = "foobar";
    var myName;

    var myScore = 0;
    var thisScore;

    var scoreRef;

    var playerCount = 1;
    var bruh;

    var currentCount;

    var thisX;
    var thisY;

    var aid;

    var potion;

    var numZombies;

    var allZombies = false;

    var pandemicCheck;
 

    var playerList;

    reviveRef.set({revive:false});

    connectedRef.on("value", function(snap) {

        // If they are connected..
        if (snap.val()) {
            // Add user to the connections list.
            var con = connectionsRef.push(true);

            myKey = con.key;
            console.log(myKey);
            // Remove user from the connection list when they disconnect.
            con.onDisconnect().remove();
        }
    });




    window.onload = function() {


        var game = new Phaser.Game(800, 600, Phaser.AUTO, '', {
            preload: preload,
            create: create,
            update: update
        });

        function preload() {

            game.load.image('sky', 'assets/sky.png');
            game.load.image('grass', 'assets/grass.png');
            game.load.image('zombie', 'assets/zombie.png');
            game.load.image('ground', 'assets/platform.png');
            game.load.image('face', 'assets/face.png');
            game.load.image('potion', 'assets/potion.png');
            game.load.spritesheet('dude', 'assets/dude.png', 32, 48);
            game.load.image('boxer', 'assets/character.png');
            game.load.image('bigzombie', 'assets/bigzombie.png');
            game.load.image('instructions', 'assets/rules.png');
            game.load.image('healer', 'assets/healer.png');

            potionRef.set({
                alive: true
            })


        };

        var sprite;

        var cursors;

        var potion;

        var rules;

        var counter = 60;
		var text = 0;

        function create() {

            game.add.sprite(0, 0, 'grass');
            rules =  game.add.sprite(0, 0, 'instructions');
            game.input.mouse.capture = true;

            

            cursors = this.input.keyboard.createCursorKeys();

            this.spaceKey = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);

            players = game.add.group();
            players.enableBody = true;

            scoreTexts = game.add.group();

            

        };

        function updateCounter() {

        	if (counter > 0 ) {

		    counter = counter - 1 ; 

		    text.setText(counter);

			}

		}


        var count = 0;
        var designation = false;


        $("#joinButton").on("click", function() {

            joinRef.push({
                name: myKey
            });



            rules.kill();

            myName = $("#nameInput").val();
            console.log(myName);

            myScore = 0;

            joinRef.on("value", function(snapshot) {

                if (designation === false) {

                    iHaveJoined = true;
                    var newPlayer = snapshot.val();
                    count = snapshot.numChildren();

                    console.log(count + " people joined");

                    iAmPlayer = count;
                    designation = true;
                    console.log("Hello! You are player " + count + " and your name is " + myName);

                    database.ref("/users/" + count).update({
                        myname: myName,
                        score: myScore
                    });




                } else if (designation === true) {

                    count = snapshot.numChildren();

                }



            });

            if (iAmPlayer === 1) {

            	$("#startButton").css("display", "block");

        	}


            $("#joinButton").remove();
            $("#nameInput").remove();


        });

        $("#startButton").on("click", function() {


            beginRef.set({
                status: true
            });
        })


        beginRef.on("value", function(snap) {



            if (snap.val().status === true) {

            	text = game.add.text(game.world.centerX, 25, '60', { font: "40px Arial Black", fill: "#00ffff", align: "center" });
    			text.anchor.setTo(0.5, 0.5);

            	game.time.events.loop(Phaser.Timer.SECOND, updateCounter, this);

                gameHasStarted = true;

                            console.log("game start!");
				            $("#watermark").remove();
				            $("#alert").remove();
				            $("#conref").remove();


                for (var i = 0; i < count; i++) {
                    var myNameTag;
                    var player = players.create(Math.floor((60 * (i + 1))), 30, 'boxer');
                    player.ID = (i + 1);
                    player.zombie = false;
                    // game.input.onDown.addOnce(alert("hello world!"));
                    game.physics.arcade.enable(player);
                    player.body.collideWorldBounds = true;
                    // player.anchor.set(0.5);
                    // game.camera.follow(player);

                    database.ref("/users/" + (i + 1)).on("value", function(snap) {

                        myNameTag = snap.val().myname;
                        myScore = snap.val().score;

                    });

                    spriteText = game.add.text(0, 0, myNameTag, {
                        fontSize: '16px',
                        fill: '#FFF'
                    });

                    spriteText.ID = (i + 1);

                    scoreText = game.add.text(0, 0, "$" + myScore, {
                        fontSize: '20px',
                        fill: '#33ffff'
                    }, scoreTexts);

                    scoreText.ID = (i + 1);

                    player.addChild(spriteText); // add the text to the sprite as a child, just like a group 
                    spriteText.x = player.width * -0.5; // center the text
                    spriteText.y = -20 // position the text 10 pixels above the origin of the sprite

                    player.addChild(scoreText);
                    scoreText.x = player.width * -0.5;
                    scoreText.y = 30;



                    $("#startButton").remove();
                    $("#joinButton").remove();


                }

                potion = game.add.sprite(32, game.world.height - 150, 'potion');
                game.physics.arcade.enable(potion);
                potion.body.collideWorldBounds = true;
                potion.healthy = false;

                if (iAmPlayer === 1) {

                    thisX = 20 + (Math.random() - 0.5) * 500;
                    thisY = 20 + (Math.random() - 0.5) * 500;

                    potion.body.velocity.x = thisX;
                    potion.body.velocity.y = thisY;



                }




            }

        });



        potionRef.on("value", function(snap) {

            // potion.body.velocity.x = snap.val().x ; 
            // potion.body.velocity.y = snap.val().y ;
            potion.position.x = snap.val().xcord;
            potion.position.y = snap.val().ycord;
            potion.alive = snap.val().alive;

            if (potion.alive === false) {

                potion.kill();
            }

            // if (potion.alive === true) {

            // 	potion.revive();
            // }



        });

        reviveRef.on("value", function(snap) {



        	if (snap.val().revive === true) {
        		
        		potion.alive = true;
        		potionRef.update({alive:true});
        		potion.revive();

        		potion.healthy = true;

        		  if (iAmPlayer === 1) {

                    thisX = 20 + (Math.random() - 0.5) * 500;
                    thisY = 20 + (Math.random() - 0.5) * 500;

                    potion.body.velocity.x = thisX;
                    potion.body.velocity.y = thisY;



                }
        	}


        });



        for (var i = 1; i < (25); i++) {

            database.ref("/users/" + i).on("value", function(snap) {


                players.forEach(function(player) {

                    if (player.ID === snap.val().name) {


                        player.position.x = snap.val().x;
                        player.position.y = snap.val().y;
                        player.zombie = snap.val().zombie;

                    }

                });



            });
        }



        function update() {

        	   if (counter === 0) {

        		players.forEach(function(sprite) {

        			sprite.destroy();
        			potion.destroy();
        			

        		});

        		//var highestScore =  database.ref("/users/").orderByChild("score").equalTo(true);

        		var scoreHolder = [];
        		var nameHolder = [];
        		var localMax = 1 ; 
        		var howMany;

        		database.ref("/users/").on("value", function (snap) {

        			howMany = snap.numChildren();

        		});

        		for (var i = 1; i < 25; i++) {

        			database.ref("/users/" + i).on("value", function(snap) {

        				//alert(snap.val().score)

        				if (snap.val().score) {

        				scoreHolder.push(snap.val().score)

        				} 

        				else {scoreHolder.push(0)}

        				if (snap.val().myname)	{

        				nameHolder.push(snap.val().myname) 

        				}

        				else {scoreHolder.push("blank")}

        			});

        			
        		}

        		for (var i = 0; i < scoreHolder.length; i++) {

        			if (scoreHolder[i] > localMax) {

        				localMax = scoreHolder[i] ;
        			}
        			
        		}

        		//alert();

        		text.setText("Winner: " + nameHolder[scoreHolder.indexOf(localMax)] + " with $" + localMax + "!");
        		text.y = 250;

        		counter = -10 ;


        	}




            if (gameHasStarted === true && iAmPlayer === 1) {

                if (potion.position.x === 0 && thisX < 0)

                {
                    thisX = (thisX * -1);
                    potion.body.velocity.x = thisX;

                }

                if (potion.position.x === 764 && thisX > 0)

                {
                    thisX = (thisX * -1);
                    potion.body.velocity.x = thisX;
                }
                if (potion.position.y === 0 && thisY < 0) {

                    thisY = (thisY * -1);
                    potion.body.velocity.y = thisY;
                }

                if (potion.position.y === 566 && thisY > 0) {

                    thisY = (thisY * -1);
                    potion.body.velocity.y = thisY;
                }


                var potionXY = {

                    xcord: potion.position.x,
                    ycord: potion.position.y,

                }



                potionRef.update(potionXY);


            } else if (gameHasStarted === true) {

                if (potion.position.x === 0 && potion.body.velocity.x < 0)

                {
                    potion.body.velocity.x = (potion.body.velocity.x * -1);

                }

                if (potion.position.x === 764 && potion.body.velocity.x > 0)

                {
                    potion.body.velocity.x = (potion.body.velocity.x * -1);
                }
                if (potion.position.y === 0 && potion.body.velocity.y < 0) {


                    potion.body.velocity.y = (potion.body.velocity.y * -1);
                }

                if (potion.position.y === 566 && potion.body.velocity.y > 0) {

                    potion.body.velocity.y = (potion.body.velocity.y * -1);
                }



            }

            if (gameHasStarted) {

		            if (potion.healthy === true) {

		            	potion.loadTexture('healer', 0, false);

		            }

        	}

        

            joinRef.on("value", function(snap) {
            	playerCount = snap.numChildren();
            	var joinedPlayers = snap.numChildren();
            	playerList = [];

            	for (var i = 1; i < (joinedPlayers + 1); i++) {
            		database.ref("/users/" + i).on("value", function(snapshot) {

            			playerList.push((" " + snapshot.val().myname)) ; 

            		});
            	}


            });

            var myRef = database.ref("/joined/" + myKey);

            var myConnection = database.ref("/users/" + iAmPlayer);



             $("#conref").html("<h6>Entered Players: " + playerList+ "</h6>") ;

            // game.physics.arcade.collide(players, players);

            game.physics.arcade.overlap(players, players, playerTouch, null, this);

            game.physics.arcade.overlap(potion, players, potionTouch, null, this);

           




            players.forEach(function(sprite) {

                sprite.body.velocity.x = 0;
                sprite.body.velocity.y = 0;

                if (sprite.zombie) {

                    sprite.zombie = true;

                    sprite.loadTexture('bigzombie', 0, false);

                     sprite.children[1].y = 45;

                }

                else if (sprite.zombie === false) {
                	sprite.zombie = false;
                	sprite.loadTexture('boxer', 0, false);
                		sprite.children[1].y = 30;

                }

                if (sprite) {


                }

                if (sprite.ID === iAmPlayer) {

                    var playerXY = {

                        name: sprite.ID,
                        x: sprite.position.x,
                        y: sprite.position.y,
                        zombie: sprite.zombie
                    }



                    myConnection.update(playerXY);




                    if (this.spaceKey.isDown || cursors.left.isDown || cursors.right.isDown || cursors.up.isDown || cursors.down.isDown) {


                        var scoreRef = database.ref("/users/" + iAmPlayer);

                        scoreRef.once("value", function(snap) {

                            thisScore = snap.val().score;

                        });

                        if (sprite.zombie === false) {

                        thisScore++;

                    	}

                    	else if (sprite.zombie === true) {

                    	
                    		
                    	}

                        scoreRef.update({
                            score: thisScore
                        });

                        players.forEach(function(sprite) {

                            var scoreCheck = database.ref("/users/" + sprite.ID);

                            scoreCheck.once("value", function(snap) {

                                var newScore = snap.val().score;

                                sprite.children[1].text = "$" + newScore;

                            });



                        });


                    }

                    if (sprite.zombie === false) {

		                    if (cursors.left.isDown) {
		                        //  Move to the left
		                        sprite.body.velocity.x = -350;

		                    } else if (cursors.right.isDown) {

		                        // Move right
		                        sprite.body.velocity.x = 350;


		                    }

		                    if (cursors.up.isDown) {

		                        sprite.body.velocity.y = -350;
		                    } else if (cursors.down.isDown) {

		                        sprite.body.velocity.y = 350;

		                    }

		                }

		            else if (sprite.zombie === true) {

		                    if (cursors.left.isDown) {
		                        //  Move to the left
		                        sprite.body.velocity.x = -250;

		                    } else if (cursors.right.isDown) {

		                        // Move right
		                        sprite.body.velocity.x = 250;


		                    }

		                    if (cursors.up.isDown) {

		                        sprite.body.velocity.y = -250;
		                    } else if (cursors.down.isDown) {

		                        sprite.body.velocity.y = 250;

		                    }

		                }    

                }


            }, this);

            function playerTouch(p1, p2) {

            	if (p1.zombie === true && p2.zombie === false) {

            		var gainerCon = database.ref("/users/" + p1.ID);
            		var loserCon = database.ref("/users/" + p2.ID);

            		gainerCon.once("value", function(snap) {

                	var checkThisScore = snap.val().score ;

                	checkThisScore = checkThisScore + 500 ;

                	gainerCon.update({
                		score: checkThisScore
                	});



                	});


            			                loserCon.once("value", function(snap) {

					                	var checkThisScore = snap.val().score ;

					                	checkThisScore = (checkThisScore - 500) ;

					                	loserCon.update({
					                		score: checkThisScore
					                	});

					                	});






            		 p1.zombie = true;
                    p2.zombie = true;

                        database.ref("/users/" + p1.ID).update({
                        zombie: true
                    });
                    database.ref("/users/" + p2.ID).update({
                        zombie: true
                    });


            	}

            	else if (p1.zombie === false && p2.zombie === true) {

            		var gainerCon = database.ref("/users/" + p2.ID);
            		var loserCon = database.ref("/users/" + p1.ID);

            		gainerCon.once("value", function(snap) {

                	var checkThisScore = snap.val().score ;

                	checkThisScore = checkThisScore + 500 ;

                	gainerCon.update({
                		score: checkThisScore
                	});

			                

               		});

               			loserCon.once("value", function(snap) {

			                	var checkThisScore = snap.val().score ;

			                	checkThisScore = (checkThisScore - 500) ;

			                	loserCon.update({
			                		score: checkThisScore
			                	});

			                	});

            		

            		 p1.zombie = true;
                    p2.zombie = true;

                        database.ref("/users/" + p1.ID).update({
                        zombie: true
                    });
                    database.ref("/users/" + p2.ID).update({
                        zombie: true
                    });


            	}



                if (p1.zombie === true || p2.zombie === true) {
                    p1.zombie = true;
                    p2.zombie = true;

                    database.ref("/users/" + p1.ID).update({
                        zombie: true
                    });
                    database.ref("/users/" + p2.ID).update({
                        zombie: true
                    });


                }


                joinRef.once("value", function (snap) {

                	numZombies = snap.numChildren();
                	
                	var pandemicRef =  database.ref("/users/").orderByChild("zombie").equalTo(true);

                	

                	pandemicRef.on("value", function(response) {

					  pandemicCheck = response.numChildren();

					  // if (pandemicCheck < numZombies && allZombies === true) {
					  // 	alert("POTION2");
					  // }



					  if (allZombies === false) {

					 	// console.log(pandemicCheck);

						 	 if (pandemicCheck === numZombies) {

						 	 	reviveRef.update({revive:false});
						 	 	
						 	 	reviveRef.update({revive:true});

						 	 	//revivePotion();

						 	 	allZombies = true;
						 	 }

						}

					});


                });


            }

            function revivePotion() {

            	potion.alive = true;
        		potionRef.update({alive:true});
        		potion.revive();

        		potion.healthy = true;

        		  if (iAmPlayer === 1) {

                    thisX = 20 + (Math.random() - 0.5) * 500;
                    thisY = 20 + (Math.random() - 0.5) * 500;

                    potion.body.velocity.x = thisX;
                    potion.body.velocity.y = thisY;



                }


            }

            function potionTouch(potion, sprite) {

            	if (potion.healthy === false) {

	                console.log(sprite.ID + " has touched the potion");

	                potion.kill();

	                potionRef.update({
	                    alive: false
	                })

	                var zombieCon = database.ref("/users/" + sprite.ID);

	                sprite.zombie = true;

	                zombieCon.update({
	                    zombie: true
	                });

	                zombieCon.once("value", function(snap) {

	                	var checkScore = snap.val().score ;

	                	checkScore = checkScore + 2000 ;

	                	zombieCon.update({
	                		score: checkScore
	                	});

	                });

	                zombieRef.set({
	                    status: true
	                });


            	}

            	else if (potion.healthy === true) {

            		console.log(sprite.ID + " has touched the medicine");

	                potion.kill();

	                potionRef.update({
	                    alive: false
	                });

	                var zombieCon = database.ref("/users/" + sprite.ID);

	                sprite.zombie = false;

	                zombieCon.update({
	                    zombie: false
	                });

	                zombieCon.once("value", function(snap) {

	                	var checkScore = snap.val().score ;

	                	checkScore = checkScore + 1000 ;

	                	zombieCon.update({
	                		score: checkScore
	                	});

	                });

	                zombieRef.set({
	                    status: false
	                });


	                allZombies = false;


            	}

          }  

        }

        function gofull() {

            if (game.scale.isFullScreen) {
                game.scale.stopFullScreen();
            } else {
                game.scale.startFullScreen(false);
            }

        }

        function render() {


            game.debug.spriteCoords(player, 32, 32);



        }




    }
</script>

<h1 id="alert">Z O M B O X </h1>
<h2 id = "watermark">by juan debiedma </h2>

<h6 id="conref"> </h6>

<div id = "thebuttons">

<input id="nameInput"> </input>
<button id="joinButton">Join</button>

<button id="startButton">Start Game</button>

</div>


<style>
    h1 {
        font-family: 'VT323', cursive;
        font-size: 50px;
        margin-top: -10px;
        padding: 0px;
        height: 64px;
    }

    h2 {
    	
    	font-size: 15px;
    	line-height: 2.66667rem;
    	height: 30px;
    }

    body {
        background-color: cadetblue;
    }

    h6 {
        color: blue;
        font-size: 15px;
        font-weight: bold;
        text-align: center
   
    }

    #thebuttons {

    	margin-left: 30%;
    	margin-top: 35px;
    }

    canvas {
        margin-left: 20%;
		
    }

    #startButton {

    	display: none;
    }


    #alert {
        color: #39f !important;
    }

    @-webkit-keyframes colours {
        0% {
            color: red;
        }
        25% {
            color: cyan;
        }
        50% {
            color: green;
        }
        75% {
            color: yellow;
        }
        100% {
            color: red;
        }
    }

    #alert {
        -webkit-animation-direction: normal;
        -webkit-animation-duration: 10s;
        -webkit-animation-iteration-count: infinite;
        -webkit-animation-name: colours;
        -webkit-animation-timing-function: ease;
    }
</style>