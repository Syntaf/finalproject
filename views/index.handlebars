 <div class="wrapper">



  <div class="messagesWrap">
    <ul class="messages"></ul>
  </div>

  <form action="" class="chat">
    <input type='text' id='nameInput' placeholder='Username' required maxlength=10> 
    <input type='text' id='messageInput'  placeholder='Type a message...' required maxlength=140>
    <input type="submit" value="Send â†’">
  
  </form>


</div>

 <script type="text/javascript">

   var config = {
    apiKey: "AIzaSyCd3ULrek3IDdQINHpNqbRVfl5Zk3nlXXo",
    authDomain: "hboxchat.firebaseapp.com",
    databaseURL: "https://hboxchat.firebaseio.com",
    projectId: "hboxchat",
    storageBucket: "",
    messagingSenderId: "134394144187"
  };
  firebase.initializeApp(config);




//$("#myStyle").html('<link id="myStyle" rel="stylesheet" href="https://bootswatch.com/'+myTheme+'/bootstrap.min.css">')
// Create a variable to reference the database.
var messagesRef = firebase.database();

var database = messagesRef;

var connectionsRef = messagesRef.ref("/connections");

var chatRef = messagesRef.ref("/chatroom")

var playersRef = database.ref("/players");

var positionsRef = database.ref("/positions");

var myKey = "sup";

var playerCount;
var bruh;

// '.info/connected' is a special location provided by Firebase that is updated every time
// the client's connection state changes.
// '.info/connected' is a boolean value, true if the client is connected and false if they are not.
var connectedRef = messagesRef.ref(".info/connected");

connectedRef.on("value", function(snap) {

    // If they are connected..
    if (snap.val()) {
        // Add user to the connections list.
        var con = connectionsRef.push(true);
       
        myKey = con.key;
        console.log(myKey);
        // Remove user from the connection list when they disconnect.
        con.onDisconnect().remove();
    }
});



connectionsRef.on("value", function(snap) {

     playerCount = snap.numChildren();
     console.log(playerCount);

    });
 

  // C.R.E.A.M -  cache your elements
  var messageField = $('#messageInput');
  var nameField = $('#nameInput');
  var messageList = $('.messages');

  function addMessage(data) {
    var username = data.name || 'anonymous';
    var message = data.text;

    // Create an element
    var nameElement = $('<strong>').text(username);
    var messageElement = $('<li>').text(message).prepend(nameElement);

    // Add the message to the DOM
    messageList.append(messageElement);

    // Scroll to the bottom of the message list
    messageList[0].scrollTop = messageList[0].scrollHeight;
  }

  // Listen for the form submit
  $('.chat').on('submit',function(e) {

    // stop the form from submitting
    e.preventDefault();

    // create a message object
    var message = {
      name : nameField.val(),
      text : messageField.val()
    }

    // Save Data to firebase
    chatRef.push(message);


    // clear message field
    messageField.val('');

  });

  chatRef.orderByChild("name").limitToLast(5).on('child_added', function (snapshot) {
    // Get data from returned
    addMessage(snapshot.val());
  });


window.onload = function() {

                //  Note that this html file is set to pull down Phaser 2.5.0 from the JS Delivr CDN.
                //  Although it will work fine with this tutorial, it's almost certainly not the most current version.
                //  Be sure to replace it with an updated version before you start experimenting with adding your own code.
        var game = new Phaser.Game(800, 600, Phaser.AUTO, 'phaser-example', { preload: preload, create: create, update: update });

        function preload() {

            game.load.image('sky', 'assets/sky.png');
            game.load.image('ground', 'assets/platform.png');
            game.load.image('star', 'assets/star.png');
            game.load.image('diamond', 'assets/diamond.png');
            game.load.spritesheet('dude', 'assets/dude.png', 32, 48);

            // game.stage.disableVisibilityChange = true;
        }




        var platforms;
        var player;
        var enemy;


        var enemySpeed = 100;

        var jumpCount = 0;
        var maxjumps = 2;

        var score = 0;
        var scoreText;

        // cursors = game.input.keyboard.createCursorKeys();

        function create() {

            //  We're going to be using physics, so enable the Arcade Physics system
            game.physics.startSystem(Phaser.Physics.ARCADE);

            //  A simple background for our game
            game.add.sprite(0, 0, 'sky');

            scoreText = game.add.text(16, 16, 'score: 0', { fontSize: '32px', fill: '#000' });

            //  The platforms group contains the ground and the 2 ledges we can jump on
            platforms = game.add.group();

            //  We will enable physics for any object that is created in this group
            platforms.enableBody = true;

            // Here we create the ground.
            var ground = platforms.create(0, game.world.height - 64, 'ground');

            //  Scale it to fit the width of the game (the original sprite is 400x32 in size)
            ground.scale.setTo(2, 2);

            //  This stops it from falling away when you jump on it
            ground.body.immovable = true;

            //  Now let's create two ledges
            var ledge = platforms.create(400, 400, 'ground');

            //  NECESSARY FOR PLATFORMS

            ledge.body.immovable = true;

            ledge = platforms.create(-150, 250, 'ground');

            ledge.body.immovable = true;

            //	 PLAYER 1 CREATE

            fighters = game.add.group();

            player = game.add.sprite(32, game.world.height - 150, 'dude');

            enemy = game.add.sprite(32, game.world.height - 200, 
                'diamond');

             //  PHYSICS

            
            game.physics.arcade.enable(enemy);

            player.body.bounce.y = 0.05 ; 
            player.body.gravity.y = 1500;
            player.body.collideWorldBounds = true ; 

            //	MOVEMENT ANIMATION + LOOPING for PLAYER AND ENEMY

            player.animations.add('left', [0,1,2,3], 10, true);
            player.animations.add('right', [5,6,7,8], 10, true);

            enemy.body.bounce.y = 0;
            enemy.body.gravity.y = 2500;
            enemy.body.collideWorldBounds = true;

            enemy.position.x = 500;

            enemy.body.velocity.x = enemySpeed;


            //  STAR GENERATION

            stars = game.add.group();
            stars.enableBody = true;
            

            for (var i = 0; i < 10; i++) {
                var star = stars.create(i * 70, 0, 'star');
                star.body.gravity.y = 600 ; 
                star.body.bounce.y = 0.8 + Math.random() * 0.2;
                star.body.velocity.x = 20 + (Math.random() -0.5) * 1000;
                star.body.collideWorldBounds = true;


            }
           
        }




        function update() {

            if (playerCount > bruh) {

               // alert('new player in this bitch');

                 var star = stars.create(70, 0, 'star');
                star.body.gravity.y = 600 ; 
                star.body.bounce.y = 0.8 + Math.random() * 0.2;
                star.body.velocity.x = 20 + (Math.random() -0.5) * 1000;
                star.body.collideWorldBounds = true;

            }

             var playerXY = {

              name  : myKey,
              x     : player.position.x,
              y     : player.position.y

            }



            positionsRef.set(playerXY);

            positionsRef.on('value', function(snapshot) {
              

                  player.position.x = snapshot.val().x ; 
                  player.position.y = snapshot.val().y ; 


                });

           


            if (enemy.position.x === 768)
                {enemy.body.velocity.x = -100; }
            if (enemy.position.x === 0)
                {enemy.body.velocity.x = 100; }

            stars.forEach(function(star) {  

                
                if(star.position.x === 776) 
                    {    star.body.velocity.x = -100 }
                 if(star.position.x === 0) 
                    {    star.body.velocity.x = 100}
            });

            //  HERO CANNOT FALL THROUGH PLATFORMS

            cursors = game.input.keyboard.createCursorKeys();

            var hitPlatform = game.physics.arcade.collide(player, platforms);

            game.physics.arcade.collide(stars, platforms);

            game.physics.arcade.collide(enemy, platforms);


            game.physics.arcade.overlap(player, stars, collectStar, null, this);
            game.physics.arcade.overlap(player, enemy, enemyTouch, null, this);

            player.body.velocity.x = 0 ;

            if (cursors.left.isDown)
            {
                //  Move to the left
                player.body.velocity.x = -250;
                player.animations.play('left');
            }

            else if (cursors.right.isDown) {

                // Move right
                player.body.velocity.x = 250;
                player.animations.play('right');

            }

            else {

                // Stand Still
                player.animations.stop();
                player.frame = 4;

            }

                //  JUMP

            if (cursors.up.isDown && hitPlatform) {
               
                player.body.velocity.y = -650 ;
                
               
            }



            function collectStar (player, star) {

                star.kill();

                score += 10;
                scoreText.text = 'score: ' + score;
            }

             function enemyTouch (player, enemy) {

                player.kill();

            }

            bruh = playerCount;
        }


};


  // Create a reference to firebase
// Initialize Firebase



    </script>

    <h6 id = "conref"></h6>